{"version":3,"sources":["components/ui/Navbar.js","types/types.js","actions/localStorage.js","helpers/helpHttp.js","components/Card/CardFavoriteIcon.js","components/Card/CardNoFavoriteIcon.js","components/favorites/FavoriteCity.js","Screens/FavoritesScreen.js","components/Card/CardSearchDetails.js","components/Card/CardSearch.js","actions/search.js","actions/ui.js","components/form/CardForm.js","hooks/useForm.js","components/ui/Loader.js","Screens/HomeScreen.js","Screens/NotFoundScreen.js","routes/AppRouter.js","reducers/localStorageReducer.js","reducers/uiReducer.js","store/store.js","reducers/searchReducer.js","WeatherApp.js","index.js"],"names":["Navbar","className","to","types","myStorage","localStorage","toggleCity","cities","type","payload","checkStorage","dispatch","getItem","initialState","JSON","parse","initialStorage","setItem","stringify","fetchCity","id","getCities","currentCities","find","cityId","newCities","filter","BASE_URL","helpHttp","customFetch","url","a","data","err","fetch","res","ok","Error","status","statusText","json","Swal","fire","icon","title","text","current","cityName","URL","citiesById","CardFavoriteIcon","handleFavorite","onClick","CardNoFavoriteIcon","FavoriteCity","useState","setData","showDetails","setShowDetails","storage","useSelector","state","useDispatch","refFavCard","useRef","useEffect","then","gsap","from","y","duration","ease","opacity","isFavorite","name","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","isConfirmed","weather","main","sys","coord","sunriseTime","Date","sunrise","toLocaleTimeString","sunsetTime","sunset","ref","country","temp","description","src","alt","temp_max","temp_min","feels_like","lat","lon","sea_level","grnd_level","humidity","presure","FavoriteScreen","style","color","textAlign","map","key","CardSearchDetails","clouds","wind","speed","deg","all","CardSearch","city","refCard","searchCity","error","CardForm","values","setValues","reset","handleInputChange","target","value","useForm","formValues","onSubmit","e","preventDefault","length","placeholder","onChange","Loader","HomeScreen","search","loading","ui","NotFoundScreen","AppRouter","path","element","FavoritesScreen","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","WeatherApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f799c2b0.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <div className=\"navbar\">\n      <h1>Weather App</h1>\n      <nav>\n        <ul>\n          <li>\n            <NavLink to=\"/\" className=\"navlink\">\n              Home\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/favorites\" className=\"navlink\">\n              Favorites\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","export const types = {\n  startLoading: \"[ui] Start loading\",\n  endLoading: \"[ui] End loading\",\n  resultSearch: \"[search] Result search\",\n  toggleCityFavorites: \"[favorites] Toggle city saved\",\n};\n","import { types } from \"../types/types\";\n\nconst myStorage = localStorage;\n\nconst toggleCity = (cities) => ({\n  type: types.toggleCityFavorites,\n  payload: {\n    cities,\n  },\n});\n\nexport const checkStorage = () => {\n  return (dispatch) => {\n    if (!myStorage.getItem(\"cities\")) {\n      const initialStorage = [];\n\n      myStorage.setItem(\"cities\", JSON.stringify(initialStorage));\n\n      dispatch(toggleCity(initialStorage));\n    } else {\n      const initialState = myStorage.getItem(\"cities\");\n\n      dispatch(toggleCity(JSON.parse(initialState)));\n    }\n  };\n};\n\n// TODO: load cities in redux when app starts\n\nexport const fetchCity = (id) => {\n  return (dispatch) => {\n    const getCities = myStorage.getItem(\"cities\");\n    const currentCities = JSON.parse(getCities);\n\n    const isCity = currentCities.find((cityId) => cityId === id);\n\n    if (!isCity) {\n      const newCities = [...currentCities, id];\n      dispatch(toggleCity(newCities));\n\n      myStorage.setItem(\"cities\", JSON.stringify(newCities));\n    } else {\n      const newCities = currentCities.filter((cityId) => cityId !== id);\n      dispatch(toggleCity(newCities));\n      myStorage.setItem(\"cities\", JSON.stringify(newCities));\n    }\n  };\n};\n","import Swal from \"sweetalert2\";\n\n//const WEATHER_KEY = \"ddb12dfe0c97dfe3a4fc0222612c0e9c\";\nconst WEATHER_KEY = \"a4091adafda6b36daf58b1d0213f12b8\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5/\";\n\nexport const helpHttp = () => {\n  const customFetch = async (url) => {\n    let data = null;\n    let err = null;\n\n    try {\n      const res = await fetch(url);\n\n      if (!res.ok) {\n        err = new Error(\"Error fetching city\");\n        err.status = res.status;\n        err.statusText = res.statusText;\n        throw err;\n      }\n\n      data = await res.json();\n      err = null;\n\n      return { data, err };\n    } catch (error) {\n      Swal.fire({\n        icon: \"error\",\n        title: \"No city found\",\n        text: \"Please try with a valid city name\",\n      });\n\n      data = null;\n      err = error;\n\n      return { data, err };\n    }\n  };\n\n  const current = (cityName) => {\n    const URL = `${BASE_URL}weather?q=${cityName}&appid=${WEATHER_KEY}&units=metric`;\n\n    return customFetch(URL);\n  };\n\n  const citiesById = (id) => {\n    const URL = `${BASE_URL}weather?id=${id}&appid=${WEATHER_KEY}&units=metric`;\n\n    return customFetch(URL);\n  };\n\n  return {\n    current,\n    citiesById,\n  };\n};\n","import React from \"react\";\nconst CardFavoriteIcon = ({ handleFavorite }) => {\n  return (\n    <button onClick={handleFavorite} className=\"btn btn-favorite\">\n      <i className=\"far fa-star\"></i>\n    </button>\n  );\n};\n\nexport default CardFavoriteIcon;\n","import React from \"react\";\n\nconst CardNoFavoriteIcon = ({ handleFavorite }) => {\n  return (\n    <button onClick={handleFavorite} className=\"btn btn-favorite\">\n      <i className=\"fas fa-star\"></i>\n    </button>\n  );\n};\n\nexport default CardNoFavoriteIcon;\n","import React, { useEffect, useRef, useState } from \"react\";\n/* redux */\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { fetchCity } from \"../../actions/localStorage\";\n/* helpers */\nimport { helpHttp } from \"../../helpers/helpHttp\";\n/* components */\nimport CardFavoriteIcon from \"../Card/CardFavoriteIcon\";\nimport CardNoFavoriteIcon from \"../Card/CardNoFavoriteIcon\";\n/* external libraries */\nimport gsap from \"gsap/all\";\nimport Swal from \"sweetalert2\";\n\nconst FavoriteCity = ({ id }) => {\n  const [data, setData] = useState(null);\n  const [showDetails, setShowDetails] = useState(false);\n  const storage = useSelector((state) => state.storage);\n  const dispatch = useDispatch();\n  const refFavCard = useRef();\n\n  useEffect(() => {\n    helpHttp()\n      .citiesById(id)\n      .then((res) => setData(res.data));\n  }, [id]);\n\n  useEffect(() => {\n    if (data) {\n      gsap.from(refFavCard.current, {\n        y: 50,\n        duration: 1,\n        ease: \"power1\",\n        opacity: 0,\n      });\n    }\n  }, [data]);\n\n  if (!data) return null;\n\n  const isFavorite = storage.find((cityId) => cityId === id);\n\n  const handleFavorite = () => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: `You will delete \"${name}\"`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        //Swal.fire(\"Deleted!\", \"Your file has been deleted.\", \"success\");\n        dispatch(fetchCity(id));\n      }\n    });\n  };\n\n  const handleDetails = () => {\n    setShowDetails(!showDetails);\n  };\n\n  const { name, weather, main, sys, coord } = data;\n\n  const sunrise = new Date(sys.sunrise * 1000);\n  const sunriseTime = sunrise.toLocaleTimeString();\n  const sunset = new Date(sys.sunset * 1000);\n  const sunsetTime = sunset.toLocaleTimeString();\n\n  return (\n    <article className=\"favcard\" ref={refFavCard}>\n      <section className=\"favcard__header\">\n        <div>\n          <h3>{name}</h3>\n          <p>{sys.country}</p>\n        </div>\n        <p>{main.temp}°C</p>\n        {!isFavorite ? (\n          <CardFavoriteIcon handleFavorite={handleFavorite} />\n        ) : (\n          <CardNoFavoriteIcon handleFavorite={handleFavorite} />\n        )}\n      </section>\n\n      <button onClick={handleDetails} className=\"btn-details\">\n        Details\n      </button>\n\n      <div\n        className={`favcard__details ${\n          !showDetails ? \"hide-details\" : \"show-details\"\n        } `}\n      >\n        <section className=\"favcard__weather-desc\">\n          <hr />\n          <h3>{weather[0].main}</h3>\n          <p>{weather[0].description}</p>\n          <img\n            className=\"favcard__weather-icon\"\n            src={`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\n            alt=\"weather icon\"\n          />\n        </section>\n\n        <section className=\"favcard__weather-main\">\n          <p>Max {main.temp_max} °C</p>\n          <p>Min {main.temp_min} °C</p>\n          <p>Feels like {main.feels_like} °C</p>\n        </section>\n\n        <section className=\"favcard__weather-main\">\n          <p>Sunrise {sunriseTime}</p>\n          <p>Sunset {sunsetTime}</p>\n        </section>\n        <section className=\"favcard__weather-main\">\n          <p>\n            Coords: Latitude {coord.lat}°, longitude {coord.lon}°\n          </p>\n        </section>\n        <section className=\"favcard__weather-main\">\n          {main.sea_level && <p>Sea level: {main.sea_level} hPa</p>}\n          {main.grnd_level && <p>Ground level: {main.grnd_level} hPa</p>}\n          {main.humidity && <p>Humidity: {main.humidity}%</p>}\n          {main.presure && <p>Presure {main.presure} hPa</p>}\n        </section>\n      </div>\n    </article>\n  );\n};\n\nexport default FavoriteCity;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { checkStorage } from \"../actions/localStorage\";\nimport FavoriteCity from \"../components/favorites/FavoriteCity\";\n\nconst FavoriteScreen = () => {\n  const storage = useSelector((state) => state.storage);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(checkStorage());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h2 style={{ color: \"white\", textAlign: \"center\" }}>Favorite Cities</h2>\n      {storage.map((id) => (\n        <FavoriteCity id={id} key={id} />\n      ))}\n    </>\n  );\n};\n\nexport default FavoriteScreen;\n","import React from \"react\";\n\nconst CardSearchDetails = ({ main, clouds, wind, coord, showDetails }) => {\n  return (\n    <article\n      className={`card__details ${\n        !showDetails ? \"hide-details\" : \"show-details\"\n      } `}\n    >\n      <section>\n        <h3>Temperature</h3>\n\n        <div className=\"flex-row\">\n          <p>Feels like: {main.feels_like}°C</p>\n          <p>Minimun: {main.temp_min}°C</p>\n          <p>Maximun: {main.temp_max}°C</p>\n        </div>\n      </section>\n      <section>\n        <h3>Wind</h3>\n\n        <div className=\"flex-row\">\n          <p>Wind: {wind.speed} km/h</p>\n          <p>Wind direction: {wind.deg}°deg</p>\n          <p>clouds: {clouds.all}%</p>\n        </div>\n      </section>\n      <section>\n        <h3>Location</h3>\n\n        <div className=\"flex-row\">\n          <p>Longitud: {coord.lon} °</p>\n          <p>Latitud: {coord.lat} °</p>\n        </div>\n      </section>\n    </article>\n  );\n};\n\nexport default CardSearchDetails;\n","import gsap from \"gsap/all\";\nimport React, { useEffect, useRef, useState } from \"react\";\n/* Redux */\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchCity } from \"../../actions/localStorage\";\n/* Components */\nimport CardFavoriteIcon from \"./CardFavoriteIcon\";\nimport CardNoFavoriteIcon from \"./CardNoFavoriteIcon\";\nimport CardSearchDetails from \"./CardSearchDetails\";\n\nconst CardSearch = ({ city }) => {\n  const [showDetails, setShowDetails] = useState(false);\n  const storage = useSelector((state) => state.storage);\n  const dispatch = useDispatch();\n  const refCard = useRef();\n\n  useEffect(() => {\n    if (city) {\n      gsap.from(refCard.current, {\n        y: -50,\n        duration: 0.75,\n        ease: \"power1\",\n        opacity: 0,\n      });\n    }\n  }, [city]);\n\n  const { id, name, weather, wind, main, coord, clouds, sys } = city;\n\n  /* date configuration */\n  const sunrise = new Date(sys.sunrise * 1000);\n  const sunriseTime = sunrise.toLocaleTimeString();\n  const sunset = new Date(sys.sunset * 1000);\n  const sunsetTime = sunset.toLocaleTimeString();\n\n  const isFavorite = storage.find((cityId) => cityId === id);\n\n  /* events */\n  const handleFavorite = () => {\n    dispatch(fetchCity(id));\n  };\n\n  const handleDetails = () => {\n    setShowDetails(!showDetails);\n  };\n\n  return (\n    <section className=\"card\" ref={refCard}>\n      <header className=\"card__header\">\n        <h2>{name}</h2>\n        <p>Country: {sys.country}</p>\n        {!isFavorite ? (\n          <CardFavoriteIcon handleFavorite={handleFavorite} />\n        ) : (\n          <CardNoFavoriteIcon handleFavorite={handleFavorite} />\n        )}\n      </header>\n      <hr />\n      <main className=\"card__main\">\n        <section className=\"card__main-top\">\n          <h3>{weather[0].main}</h3>\n          <p>{weather[0].description}</p>\n          <img\n            className=\"card__weather-icon\"\n            src={`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\n            alt=\"weather icon\"\n          />\n        </section>\n        <article className=\"card__main-temp\">{main.temp}°C</article>\n        <section className=\"card__main-bot\">\n          <p>\n            Sunrise: <wbr /> {sunriseTime}\n          </p>\n          <p>Humidity: {main.humidity}%</p>\n          <p>\n            Sunset: <wbr />\n            {sunsetTime}\n          </p>\n        </section>\n        <button onClick={handleDetails} className=\"btn btn-details\">\n          Details\n        </button>\n      </main>\n      <hr />\n\n      <CardSearchDetails\n        wind={wind}\n        main={main}\n        coord={coord}\n        clouds={clouds}\n        showDetails={showDetails}\n      />\n    </section>\n  );\n};\n\nexport default CardSearch;\n","import { helpHttp } from \"../helpers/helpHttp\";\nimport { types } from \"../types/types\";\nimport { endLoading, startLoading } from \"./ui\";\n\nexport const search = (city, error) => ({\n  type: types.resultSearch,\n  payload: {\n    city,\n    error,\n  },\n});\n\nexport const searchCity = (name) => {\n  return (dispatch) => {\n    dispatch(startLoading());\n\n    const res = helpHttp().current(name);\n\n    res.then(({ data, err }) => {\n      dispatch(search(data, err));\n\n      dispatch(endLoading());\n    });\n  };\n};\n","import { types } from \"../types/types\";\n\nexport const startLoading = () => ({\n  type: types.startLoading,\n});\n\nexport const endLoading = () => ({\n  type: types.endLoading,\n});\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport { searchCity } from \"../../actions/search\";\nimport { useForm } from \"../../hooks/useForm\";\n\nconst CardForm = () => {\n  const [formValues, handleInputChange, reset] = useForm({ name: \"\" });\n  const { name } = formValues;\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (name.length < 3) {\n      return Swal.fire({\n        icon: \"error\",\n        title: \"You need a city name\",\n        text: \"You need more than 2 letters to search a city.\",\n      });\n    }\n\n    dispatch(searchCity(name));\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Search city...\"\n        name=\"name\"\n        value={name}\n        onChange={handleInputChange}\n      />\n      <button type=\"submit\">Search </button>\n    </form>\n  );\n};\n\nexport default CardForm;\n","import { useState } from \"react\";\n\nexport const useForm = (initialState = {}) => {\n  const [values, setValues] = useState(initialState);\n\n  const reset = () => {\n    setValues(initialState);\n  };\n\n  const handleInputChange = ({ target }) => {\n    setValues({\n      ...values,\n      [target.name]: target.value,\n    });\n  };\n\n  return [values, handleInputChange, reset];\n};\n","import React from \"react\";\n\nconst Loader = () => {\n  return (\n    <article className=\"loader\">\n      <h2>Loading</h2>\n      <div className=\"lds-roller\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </article>\n  );\n};\n\nexport default Loader;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { checkStorage } from \"../actions/localStorage\";\nimport CardSearch from \"../components/Card/CardSearch\";\nimport CardForm from \"../components/form/CardForm\";\nimport Loader from \"../components/ui/Loader\";\n\nconst HomeScreen = () => {\n  const dispatch = useDispatch();\n\n  const { city } = useSelector((state) => state.search);\n  const { loading } = useSelector((state) => state.ui);\n\n  useEffect(() => {\n    dispatch(checkStorage());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <CardForm />\n      {loading && <Loader />}\n      {city && !loading && <CardSearch city={city} />}\n    </div>\n  );\n};\n\nexport default HomeScreen;\n","import React from \"react\";\n\nconst NotFoundScreen = () => {\n  return (\n    <div>\n      <h1>Not Found</h1>\n      <p>Error 404</p>\n    </div>\n  );\n};\n\nexport default NotFoundScreen;\n","import React from \"react\";\nimport { Routes, Route, HashRouter } from \"react-router-dom\";\nimport Navbar from \"../components/ui/Navbar\";\nimport FavoritesScreen from \"../Screens/FavoritesScreen\";\nimport HomeScreen from \"../Screens/HomeScreen\";\nimport NotFoundScreen from \"../Screens/NotFoundScreen\";\n\nconst AppRouter = () => {\n  return (\n    <HashRouter>\n      <Navbar />\n      <Routes>\n        <Route path=\"/\" element={<HomeScreen />} />\n        <Route path=\"/favorites\" element={<FavoritesScreen />} />\n        <Route path=\"*\" element={<NotFoundScreen />} />\n      </Routes>\n    </HashRouter>\n  );\n};\n\nexport default AppRouter;\n","import { types } from \"../types/types\";\n\nconst initialState = [];\n\nexport const localStorageReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.toggleCityFavorites:\n      return action.payload.cities;\n\n    default:\n      return state;\n  }\n};\n","import { types } from \"../types/types\";\n\nconst initialState = {\n  loading: false,\n};\n\nexport const uiReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.startLoading:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case types.endLoading:\n      return {\n        ...state,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { localStorageReducer } from \"../reducers/localStorageReducer\";\nimport { searchReducer } from \"../reducers/searchReducer\";\nimport { uiReducer } from \"../reducers/uiReducer\";\n\nconst composeEnhancers =\n  (typeof window !== \"undefined\" &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nconst reducers = combineReducers({\n  search: searchReducer,\n  ui: uiReducer,\n  storage: localStorageReducer,\n});\n\nexport const store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(thunk))\n);\n","import { types } from \"../types/types\";\n\nexport const searchReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.resultSearch:\n      return {\n        city: action.payload.city,\n        error: action.payload.error,\n      };\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport AppRouter from \"./routes/AppRouter\";\nimport { store } from \"./store/store\";\n\nfunction WeatherApp() {\n  return (\n    <Provider store={store}>\n      <AppRouter />\n    </Provider>\n  );\n}\n\nexport default WeatherApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport WeatherApp from \"./WeatherApp\";\n\nReactDOM.render(<WeatherApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}