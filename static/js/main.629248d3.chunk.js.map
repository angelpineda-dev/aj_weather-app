{"version":3,"sources":["components/ui/Navbar.js","types/types.js","actions/localStorage.js","helpers/helpHttp.js","components/Card/CardFavoriteIcon.js","components/Card/CardNoFavoriteIcon.js","components/Card/CardTemp.js","components/Card/CardSun.js","components/Card/CardLocations.js","components/Card/CardAdvancedDetails.js","components/Card/CardSmallDesc.js","components/favorites/FavoriteCity.js","Screens/FavoritesScreen.js","components/Card/CardWind.js","components/Card/Card.js","actions/search.js","actions/ui.js","components/form/CardForm.js","hooks/useForm.js","components/ui/Loader.js","Screens/HomeScreen.js","Screens/NotFoundScreen.js","routes/AppRouter.js","reducers/localStorageReducer.js","reducers/uiReducer.js","store/store.js","reducers/searchReducer.js","WeatherApp.js","index.js"],"names":["Navbar","className","to","types","myStorage","localStorage","toggleCity","cities","type","payload","checkStorage","dispatch","getItem","initialState","JSON","parse","initialStorage","setItem","stringify","fetchCity","id","getCities","currentCities","find","cityId","newCities","filter","BASE_URL","helpHttp","customFetch","url","a","data","err","fetch","res","ok","Error","status","statusText","json","Swal","fire","icon","title","text","current","cityName","URL","citiesById","CardFavoriteIcon","handleFavorite","onClick","CardNoFavoriteIcon","CardTemp","main","temp_max","temp_min","feels_like","CardSun","sys","sunriseTime","Date","sunrise","toLocaleTimeString","sunsetTime","sunset","CardLocations","coord","lat","lon","CardAdvancedDetails","sea_level","grnd_level","humidity","presure","CardSmallDesc","weather","description","src","alt","memo","useState","setData","showDetails","setShowDetails","storage","useSelector","state","useDispatch","refFavCard","useRef","useEffect","then","gsap","from","y","duration","ease","opacity","isFavorite","name","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","isConfirmed","ref","country","temp","FavoriteScreen","style","color","textAlign","map","key","CardWind","wind","clouds","speed","deg","all","Card","city","refCard","searchCity","error","CardForm","values","setValues","reset","handleInputChange","target","value","useForm","formValues","onSubmit","e","preventDefault","trim","length","placeholder","onChange","Loader","HomeScreen","search","loading","ui","NotFoundScreen","AppRouter","path","element","FavoritesScreen","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","WeatherApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.629248d3.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <div className=\"navbar\">\n      <h1>Weather App</h1>\n      <nav>\n        <ul>\n          <li>\n            <NavLink to=\"/\" className=\"navlink\">\n              Home\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/favorites\" className=\"navlink\">\n              Favorites\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","export const types = {\n  startLoading: \"[ui] Start loading\",\n  endLoading: \"[ui] End loading\",\n  resultSearch: \"[search] Result search\",\n  toggleCityFavorites: \"[favorites] Toggle city saved\",\n};\n","import { types } from \"../types/types\";\n\nconst myStorage = localStorage;\n\nconst toggleCity = (cities) => ({\n  type: types.toggleCityFavorites,\n  payload: {\n    cities,\n  },\n});\n\nexport const checkStorage = () => {\n  return (dispatch) => {\n    if (!myStorage.getItem(\"cities\")) {\n      const initialStorage = [];\n\n      myStorage.setItem(\"cities\", JSON.stringify(initialStorage));\n\n      dispatch(toggleCity(initialStorage));\n    } else {\n      const initialState = myStorage.getItem(\"cities\");\n\n      dispatch(toggleCity(JSON.parse(initialState)));\n    }\n  };\n};\n\n// TODO: load cities in redux when app starts\n\nexport const fetchCity = (id) => {\n  return (dispatch) => {\n    const getCities = myStorage.getItem(\"cities\");\n    const currentCities = JSON.parse(getCities);\n\n    const isCity = currentCities.find((cityId) => cityId === id);\n\n    if (!isCity) {\n      const newCities = [...currentCities, id];\n      dispatch(toggleCity(newCities));\n\n      myStorage.setItem(\"cities\", JSON.stringify(newCities));\n    } else {\n      const newCities = currentCities.filter((cityId) => cityId !== id);\n      dispatch(toggleCity(newCities));\n      myStorage.setItem(\"cities\", JSON.stringify(newCities));\n    }\n  };\n};\n","import Swal from \"sweetalert2\";\n\n//const WEATHER_KEY = \"ddb12dfe0c97dfe3a4fc0222612c0e9c\";\nconst WEATHER_KEY = \"a4091adafda6b36daf58b1d0213f12b8\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5/\";\n\nexport const helpHttp = () => {\n  const customFetch = async (url) => {\n    let data = null;\n    let err = null;\n\n    try {\n      const res = await fetch(url);\n\n      if (!res.ok) {\n        err = new Error(\"Error fetching city\");\n        err.status = res.status;\n        err.statusText = res.statusText;\n        throw err;\n      }\n\n      data = await res.json();\n      err = null;\n\n      return { data, err };\n    } catch (error) {\n      Swal.fire({\n        icon: \"error\",\n        title: \"No city found\",\n        text: \"Please try with a valid city name\",\n      });\n\n      data = null;\n      err = error;\n\n      return { data, err };\n    }\n  };\n\n  const current = (cityName) => {\n    const URL = `${BASE_URL}weather?q=${cityName}&appid=${WEATHER_KEY}&units=metric`;\n\n    return customFetch(URL);\n  };\n\n  const citiesById = (id) => {\n    const URL = `${BASE_URL}weather?id=${id}&appid=${WEATHER_KEY}&units=metric`;\n\n    return customFetch(URL);\n  };\n\n  return {\n    current,\n    citiesById,\n  };\n};\n","import React from \"react\";\nconst CardFavoriteIcon = ({ handleFavorite }) => {\n  return (\n    <button onClick={handleFavorite} className=\"btn btn-favorite\">\n      <i className=\"far fa-star\"></i>\n    </button>\n  );\n};\n\nexport default CardFavoriteIcon;\n","import React from \"react\";\n\nconst CardNoFavoriteIcon = ({ handleFavorite }) => {\n  return (\n    <button onClick={handleFavorite} className=\"btn btn-favorite\">\n      <i className=\"fas fa-star\"></i>\n    </button>\n  );\n};\n\nexport default CardNoFavoriteIcon;\n","import React from \"react\";\n\nconst CardTemp = ({ main }) => {\n  return (\n    <section className=\"card__section\">\n      <h3>Temperature</h3>\n      <div>\n        <p>Max: {main.temp_max} °C</p>\n        <p>Min: {main.temp_min} °C</p>\n        <p>Feels like: {main.feels_like} °C</p>\n      </div>\n    </section>\n  );\n};\n\nexport default CardTemp;\n","import React from \"react\";\n\nconst CardSun = ({ sys }) => {\n  const sunrise = new Date(sys.sunrise * 1000);\n  const sunriseTime = sunrise.toLocaleTimeString();\n  const sunset = new Date(sys.sunset * 1000);\n  const sunsetTime = sunset.toLocaleTimeString();\n\n  return (\n    <section className=\"card__section\">\n      <h3>Sun time</h3>\n      <div>\n        <p>Sunrise: {sunriseTime}</p>\n        <p>Sunset: {sunsetTime}</p>\n      </div>\n    </section>\n  );\n};\n\nexport default CardSun;\n","import React from \"react\";\n\nconst CardLocations = ({ coord }) => {\n  return (\n    <section className=\"card__section\">\n      <h3>Coords</h3>\n      <div>\n        <p>Latitude: {coord.lat}°</p>\n        <p>longitude: {coord.lon}°</p>\n      </div>\n    </section>\n  );\n};\n\nexport default CardLocations;\n","import React from \"react\";\n\nfunction CardAdvancedDetails({ main }) {\n  return (\n    <section className=\"card__section\">\n      <h3>Advanced details</h3>\n      <div>\n        {main.sea_level && <p>Sea level: {main.sea_level} hPa</p>}\n        {main.grnd_level && <p>Ground level: {main.grnd_level} hPa</p>}\n        {main.humidity && <p>Humidity: {main.humidity}%</p>}\n        {main.presure && <p>Presure: {main.presure} hPa</p>}\n      </div>\n    </section>\n  );\n}\n\nexport default CardAdvancedDetails;\n","import React from \"react\";\n\nconst CardSmallDesc = ({ weather }) => {\n  return (\n    <section className=\"card__weather-desc\">\n      <h3>{weather[0].main}</h3>\n      <p>{weather[0].description}</p>\n      <img\n        src={`https://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\n        alt=\"weather icon\"\n      />\n    </section>\n  );\n};\n\nexport default CardSmallDesc;\n","import React, { memo, useEffect, useRef, useState } from \"react\";\n/* redux */\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { fetchCity } from \"../../actions/localStorage\";\n/* helpers */\nimport { helpHttp } from \"../../helpers/helpHttp\";\n/* components */\nimport CardFavoriteIcon from \"../Card/CardFavoriteIcon\";\nimport CardNoFavoriteIcon from \"../Card/CardNoFavoriteIcon\";\n/* external libraries */\nimport gsap from \"gsap/all\";\nimport Swal from \"sweetalert2\";\nimport CardTemp from \"../Card/CardTemp\";\nimport CardSun from \"../Card/CardSun\";\nimport CardLocations from \"../Card/CardLocations\";\nimport CardAdvancedDetails from \"../Card/CardAdvancedDetails\";\nimport CardSmallDesc from \"../Card/CardSmallDesc\";\n\nconst FavoriteCity = ({ id }) => {\n  const [data, setData] = useState(null);\n  const [showDetails, setShowDetails] = useState(false);\n  const storage = useSelector((state) => state.storage);\n  const dispatch = useDispatch();\n  const refFavCard = useRef();\n\n  useEffect(() => {\n    helpHttp()\n      .citiesById(id)\n      .then((res) => setData(res.data));\n  }, [id]);\n\n  useEffect(() => {\n    if (data) {\n      gsap.from(refFavCard.current, {\n        y: 50,\n        duration: 1,\n        ease: \"power1\",\n        opacity: 0,\n      });\n    }\n  }, [data]);\n\n  if (!data) return null;\n\n  const isFavorite = storage.find((cityId) => cityId === id);\n\n  const handleFavorite = () => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: `You will delete \"${name}\"`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        Swal.fire(\"Deleted!\", \"Your file has been deleted.\", \"success\");\n        dispatch(fetchCity(id));\n      }\n    });\n  };\n\n  const handleDetails = () => {\n    setShowDetails(!showDetails);\n  };\n\n  const { name, weather, main, sys, coord } = data;\n\n  return (\n    <article className=\"card\" ref={refFavCard}>\n      <section className=\"card__header\">\n        <div>\n          <h2>{name}</h2>\n          <p>{sys.country}</p>\n        </div>\n        <p className=\"card__main-temp\">{main.temp}°C</p>\n\n        {!isFavorite ? (\n          <CardFavoriteIcon handleFavorite={handleFavorite} />\n        ) : (\n          <CardNoFavoriteIcon handleFavorite={handleFavorite} />\n        )}\n      </section>\n\n      <button onClick={handleDetails} className=\"btn-details\">\n        Details\n      </button>\n      <hr />\n\n      <div\n        className={`card__details ${\n          !showDetails ? \"hide-details\" : \"show-details\"\n        }`}\n      >\n        <CardSmallDesc weather={weather} />\n        <CardTemp main={main} />\n        <CardSun sys={sys} />\n        <CardLocations coord={coord} />\n        <CardAdvancedDetails main={main} />\n      </div>\n    </article>\n  );\n};\n\nexport default memo(FavoriteCity);\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { checkStorage } from \"../actions/localStorage\";\nimport FavoriteCity from \"../components/favorites/FavoriteCity\";\n\nconst FavoriteScreen = () => {\n  const storage = useSelector((state) => state.storage);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(checkStorage());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h2 style={{ color: \"white\", textAlign: \"center\" }}>Favorite Cities</h2>\n      {storage.map((id) => (\n        <FavoriteCity id={id} key={id} />\n      ))}\n    </>\n  );\n};\n\nexport default FavoriteScreen;\n","import React from \"react\";\n\nconst CardWind = ({ wind, clouds }) => {\n  return (\n    <section className=\"card__section\">\n      <h3>Wind</h3>\n\n      <div>\n        <p>Wind: {wind.speed} km/h</p>\n        <p>Wind direction: {wind.deg}°deg</p>\n        <p>clouds: {clouds.all}%</p>\n      </div>\n    </section>\n  );\n};\n\nexport default CardWind;\n","import React, { useEffect, useRef, useState } from \"react\";\n/* libraries */\nimport gsap from \"gsap/all\";\n/* Redux */\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fetchCity } from \"../../actions/localStorage\";\n/* Components */\nimport CardFavoriteIcon from \"./CardFavoriteIcon\";\nimport CardNoFavoriteIcon from \"./CardNoFavoriteIcon\";\nimport CardSmallDesc from \"./CardSmallDesc\";\nimport CardTemp from \"./CardTemp\";\nimport CardSun from \"./CardSun\";\nimport CardLocations from \"./CardLocations\";\nimport CardAdvancedDetails from \"./CardAdvancedDetails\";\nimport CardWind from \"./CardWind\";\n\nconst Card = ({ city }) => {\n  const [showDetails, setShowDetails] = useState(false);\n  const storage = useSelector((state) => state.storage);\n  const dispatch = useDispatch();\n  const refCard = useRef();\n\n  useEffect(() => {\n    if (city) {\n      gsap.from(refCard.current, {\n        y: -50,\n        duration: 0.75,\n        ease: \"power1\",\n        opacity: 0,\n      });\n    }\n  }, [city]);\n\n  const { id, name, weather, wind, main, coord, clouds, sys } = city;\n\n  const isFavorite = storage.find((cityId) => cityId === id);\n\n  /* events */\n  const handleFavorite = () => {\n    dispatch(fetchCity(id));\n  };\n\n  const handleDetails = () => {\n    setShowDetails(!showDetails);\n  };\n\n  return (\n    <section className=\"card\">\n      <header className=\"card__header\">\n        <h2>{name}</h2>\n        <p>Country: {sys.country}</p>\n        {!isFavorite ? (\n          <CardFavoriteIcon handleFavorite={handleFavorite} />\n        ) : (\n          <CardNoFavoriteIcon handleFavorite={handleFavorite} />\n        )}\n      </header>\n      <hr />\n      <main>\n        <CardSmallDesc weather={weather} />\n        <article className=\"card__main-temp\">{main.temp}°C</article>\n        <button onClick={handleDetails} className=\"btn btn-details \">\n          Details\n        </button>\n        <hr />\n      </main>\n\n      <div\n        className={`card__details ${\n          !showDetails ? \"hide-details\" : \"show-details\"\n        }`}\n      >\n        <CardTemp main={main} />\n        <CardSun sys={sys} />\n        <CardLocations coord={coord} />\n        <CardWind wind={wind} clouds={clouds} />\n        <CardAdvancedDetails main={main} />\n      </div>\n    </section>\n  );\n};\n\nexport default Card;\n","import { helpHttp } from \"../helpers/helpHttp\";\nimport { types } from \"../types/types\";\nimport { endLoading, startLoading } from \"./ui\";\n\nexport const search = (city, error) => ({\n  type: types.resultSearch,\n  payload: {\n    city,\n    error,\n  },\n});\n\nexport const searchCity = (name) => {\n  return (dispatch) => {\n    dispatch(startLoading());\n\n    const res = helpHttp().current(name);\n\n    res.then(({ data, err }) => {\n      dispatch(search(data, err));\n\n      dispatch(endLoading());\n    });\n  };\n};\n","import { types } from \"../types/types\";\n\nexport const startLoading = () => ({\n  type: types.startLoading,\n});\n\nexport const endLoading = () => ({\n  type: types.endLoading,\n});\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport { searchCity } from \"../../actions/search\";\nimport { useForm } from \"../../hooks/useForm\";\n\nconst CardForm = () => {\n  const [formValues, handleInputChange, reset] = useForm({ name: \"\" });\n  const { name } = formValues;\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (name.trim().length < 3) {\n      return Swal.fire({\n        icon: \"error\",\n        title: \"You need a city name\",\n        text: \"You need at least 3 letters to search a city.\",\n      });\n    }\n\n    dispatch(searchCity(name));\n    reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Search city...\"\n        name=\"name\"\n        value={name}\n        onChange={handleInputChange}\n      />\n      <button type=\"submit\">Search </button>\n    </form>\n  );\n};\n\nexport default CardForm;\n","import { useState } from \"react\";\n\nexport const useForm = (initialState = {}) => {\n  const [values, setValues] = useState(initialState);\n\n  const reset = () => {\n    setValues(initialState);\n  };\n\n  const handleInputChange = ({ target }) => {\n    setValues({\n      ...values,\n      [target.name]: target.value,\n    });\n  };\n\n  return [values, handleInputChange, reset];\n};\n","import React from \"react\";\n\nconst Loader = () => {\n  return (\n    <article className=\"loader\">\n      <h2>Loading</h2>\n      <div className=\"lds-roller\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </article>\n  );\n};\n\nexport default Loader;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { checkStorage } from \"../actions/localStorage\";\nimport Card from \"../components/Card/Card\";\nimport CardForm from \"../components/form/CardForm\";\nimport Loader from \"../components/ui/Loader\";\n\nconst HomeScreen = () => {\n  const dispatch = useDispatch();\n\n  const { city } = useSelector((state) => state.search);\n  const { loading } = useSelector((state) => state.ui);\n\n  useEffect(() => {\n    dispatch(checkStorage());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <CardForm />\n      {loading && <Loader />}\n      {city && !loading && <Card city={city} />}\n    </div>\n  );\n};\n\nexport default HomeScreen;\n","import React from \"react\";\n\nconst NotFoundScreen = () => {\n  return (\n    <div>\n      <h1>Not Found</h1>\n      <p>Error 404</p>\n    </div>\n  );\n};\n\nexport default NotFoundScreen;\n","import React from \"react\";\nimport { Routes, Route, HashRouter } from \"react-router-dom\";\nimport Navbar from \"../components/ui/Navbar\";\nimport FavoritesScreen from \"../Screens/FavoritesScreen\";\nimport HomeScreen from \"../Screens/HomeScreen\";\nimport NotFoundScreen from \"../Screens/NotFoundScreen\";\n\nconst AppRouter = () => {\n  return (\n    <HashRouter>\n      <Navbar />\n      <Routes>\n        <Route path=\"/\" element={<HomeScreen />} />\n        <Route path=\"/favorites\" element={<FavoritesScreen />} />\n        <Route path=\"*\" element={<NotFoundScreen />} />\n      </Routes>\n    </HashRouter>\n  );\n};\n\nexport default AppRouter;\n","import { types } from \"../types/types\";\n\nconst initialState = [];\n\nexport const localStorageReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.toggleCityFavorites:\n      return action.payload.cities;\n\n    default:\n      return state;\n  }\n};\n","import { types } from \"../types/types\";\n\nconst initialState = {\n  loading: false,\n};\n\nexport const uiReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.startLoading:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case types.endLoading:\n      return {\n        ...state,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { localStorageReducer } from \"../reducers/localStorageReducer\";\nimport { searchReducer } from \"../reducers/searchReducer\";\nimport { uiReducer } from \"../reducers/uiReducer\";\n\nconst composeEnhancers =\n  (typeof window !== \"undefined\" &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nconst reducers = combineReducers({\n  search: searchReducer,\n  ui: uiReducer,\n  storage: localStorageReducer,\n});\n\nexport const store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(thunk))\n);\n","import { types } from \"../types/types\";\n\nexport const searchReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.resultSearch:\n      return {\n        city: action.payload.city,\n        error: action.payload.error,\n      };\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport AppRouter from \"./routes/AppRouter\";\nimport { store } from \"./store/store\";\n\nfunction WeatherApp() {\n  return (\n    <Provider store={store}>\n      <AppRouter />\n    </Provider>\n  );\n}\n\nexport default WeatherApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport WeatherApp from \"./WeatherApp\";\n\nReactDOM.render(<WeatherApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}